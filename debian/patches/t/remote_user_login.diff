From: Jiang <jiangxin@ossxp.com>
Subject: [PATCH] t/remote_user_login

If remote_user already defined, register login user.

Signed-off-by: Jiang <jiangxin@ossxp.com>

---
 pysvnmanager/controllers/security.py |   62 ++++++++++++++++++++++++++--------
 1 files changed, 48 insertions(+), 14 deletions(-)

diff --git a/pysvnmanager/controllers/security.py b/pysvnmanager/controllers/security.py
index ded2193..b466e58 100644
--- a/pysvnmanager/controllers/security.py
+++ b/pysvnmanager/controllers/security.py
@@ -16,6 +16,7 @@
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 
+import datetime
 import logging
 
 from pysvnmanager.lib.base import *
@@ -29,8 +30,29 @@ class SecurityController(BaseController):
         """
         Show login form. Submits to login/submit
         """
-        return render('/login/login.mako')
+        if request.environ.get("REMOTE_USER"):
+            self._session_register(request.environ["REMOTE_USER"])
+        return self._redirect()
 
+    def _redirect(self):
+        if session.get('user'):
+            # Send user back to the page he originally wanted to get to
+            if session.get('path_before_login'):
+                redirect(url(session['path_before_login']))
+            else: # if previous target is unknown just send the user to a welcome page
+                redirect(url(controller='check',action='index'))
+        else:
+            return render('/login/login.mako')
+
+    def _session_register(self, username):
+        session['user'] = username
+        log.info(_(u"User %s logged in") % session['user'])
+        session.save()
+
+    def _session_clear(self):
+        session.clear()
+        session.save()
+ 
     def submit(self):
         """
         Verify username and password
@@ -47,21 +69,14 @@ class SecurityController(BaseController):
         
         # Mark user as logged in
         if auth_passed:
-            session['user'] = username
-            log.info(_(u"User %s logged in") % session['user'])
-            session.save()
-
-            # Send user back to the page he originally wanted to get to
-            if session.get('path_before_login'):
-                redirect(url(session['path_before_login']))
-            else: # if previous target is unknown just send the user to a welcome page
-                redirect(url(controller='check',action='index'))
+            self._session_register(username)
         else:
             log.error("pySvnManager: User %s login failed from host [%s]" % ( username, request.remote_addr))
-            session.clear()
-            session.save()
+            self._session_clear()
             c.login_message = _(u"Login failed for user: %s") % username
-            return render('/login/login.mako')
+
+        # Do redirect
+        return self._redirect()
 
     def logout(self):
         """
@@ -71,7 +86,26 @@ class SecurityController(BaseController):
             log.info(_("User %s logged out") % session['user'])
             del session['user']
             session.save()
-        redirect(url("login"))
+
+        expire_cookies = []
+        if getattr(cfg, 'logout_cookie', None):
+            if isinstance(cfg.logout_cookie, (list, tuple)):
+                expire_cookies.extend( cfg.logout_cookie )
+            else:
+                expire_cookies.append( cfg.logout_cookie )
+        # AUTH_TYPE == Cosign
+        if request.environ.get("COSIGN_SERVICE"):
+            expire_cookies.append( request.environ.get("COSIGN_SERVICE") )
+        for cookie in expire_cookies:
+            response.set_cookie(cookie, '', expires=datetime.datetime(1970,1,1))
+
+        if getattr(cfg, 'logout_url', None):
+            if request.environ.get('HTTP_REFERER'):
+                redirect( cfg.logout_url + "?" +  request.environ.get('HTTP_REFERER') )
+            else:
+                redirect( cfg.logout_url )
+        else:
+            redirect(url("login"))
 
     def failed(self):
         return render('/auth_failed.mako')
-- 
tg: (d59d078..) t/remote_user_login (depends on: master)
