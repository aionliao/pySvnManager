======================
pySvnManager 用户手册
======================

:作者: 北京群英汇信息技术有限公司
:网址: http://www.ossxp.com/
:版本: |doc_rev|
:日期: |doc_date|
:版权信息: Creative Commons

.. contents:: 目录
.. sectnum::
.. header:: pySvnManager 用户手册
.. footer:: 北京群英汇信息技术有限公司
.. |date| date:: %Y-%m-%d %H:%M
.. |doc_rev| replace:: ENV(DOC_REV)
.. |doc_date| replace:: ENV(DOC_DATE)


pySvnManager 是群英汇开发的一个 Subversion 的管理后台，是用 Python
写的一个 Web 应用。具体的说，pySvnManager 是用 Pylons，一个 Python
的 Web 框架开发的。 pySvnManager 是用于管理 SVN 授权文件的，
只需要一个 SVN 授权文件即可工作，并且使用扩展的 SVN 授权文件进行
pySvnManager 本身的授权，而无须借助于诸如数据库等其它方式。

安装
=====
pySvnManager 本身使用 Python setuptools 进行打包，因此可以像安装其它 Python 包一样，
使用 easy_install 安装。此外，就像其它群英汇软件包一样，可以直接使用 Debian 或 Ubuntu
本身的包管理器进行安装。

两种安装方式的区别是:

* 使用 Debian 或 Ubuntu 包管理器方式安装的 pySvnManager 自动完成了和 Apache Web 服务器的整合工作
* 使用 easy_install 方式安装的，运行在 Python 内置的 Web 服务器和端口 5000 中

使用 Debian/Ubuntu 包管理器方式安装
-------------------------------------
Debian/Ubuntu 软件包安装两步曲：update, install

::

  $ sudo aptitude update
  $ sudo aptitude install pysvnmanager

整个安装过程完全是自动化的。

* 安装 pysvnmanager 过程中，会自动安装相关依赖软件包：

  ::

    $ sudo aptitude install pysvnmanager
    正在读取软件包列表... 完成
    正在分析软件包的依赖关系树
    正在读取状态信息... 完成
    正在读取扩展状态文件... 完成
    正在初始化软件包状态... 完成
    正在读取软件集说明档... 完成
    下列“新”软件包将被安装。
      pysvnmanager python-beaker{a} python-decorator{a} python-docutils{a} python-mako{a} python-pybabel{a} python-pygments{a} python-pylons{a}
      python-roman{a} python-routes{a} python-sqlalchemy{a} python-tempita{a} python-weberror{a} python-webhelpers{a}
    0 个软件包被升级，新安装 14 个，0 个将被删除， 同时 832 个将不升级。
    需要获取 5,172kB 的存档。解包后将要使用 23.0MB。
    您要继续吗？[Y/n/?]

* 自动在目录 /opt/pysvnmanager/sites/default/ 下配置缺省实例

  * production.ini 是服务配置文件
  * config/localconfig.py 是 pySvnManager 本身的配置文件
  * config/svn.passwd 是用户口令文件，如果使用 LDAP 认证，此文件被忽略
  * config/svn.access 是 SVN 授权文件
  * svnroot 目录或链接：指向 SVN 版本库根目录

* 服务开启自动启动

  * 服务启动脚本: /etc/init.d/pysvnmanager

* 自动完成和 Apache 的整合

  * 配置文件：/etc/apache2/include/subversion/pysvnmanager.conf 
  * 通过 Subversion 虚拟主机下 /svnadmin 目录访问

如果作为群英汇的用户，使用 Debian/Ubuntu 包管理安装 pySvnManager，可以完全不用理会后面介绍的安装模式，直接跳转到后面的配置章节。

使用 easy_install 安装
------------------------
pySvnManager 本身使用 setuptools 的部署机制，并且在 PYPI 网站上进行了注册，因此可以使用 easy_install 进行安装。

::

  $ easy_install pysvnmanager
  Searching for pysvnmanager
  Reading http://pypi.python.org/simple/pysvnmanager/
  Reading https://sourceforge.net/projects/pysvnmanager
  Reading http://pysvnmanager.sourceforge.net
  Best match: pySvnManager 0.4.1dev-r140
  Downloading http://pypi.python.org/packages/2.5/p/pySvnManager/pySvnManager-0.4.1dev_r140-py2.5.egg#md5=7d7064d4c79ab408e0b852fbb2427809
  ...

整个安装过程会自动安装依赖的软件包。如果需要直接安装在 Python 的系统目录 /usr/lib/python2.5/site-packages 下，则用 root 用户身份执行 easy_install。

和使用 Debian/Ubuntu 软件包安装方式不同，使用 easy_install 只是将 pySvnManager 作为一个 Python 包安装在系统中，而尚未创建一个可用的站点。因此在使用前需要进一步的配置。

* 创建一个目录，用于存储 pySvnManager 管理网站

  ::

    $ mkdir somedir
    $ cd somedir

* 生成一个 pySvnManager 站点配置文件

  示例中的 pySvnManager 是通过 virtualenv 方式安装的，关于 virtualenv 可以参照下一节

  ::

    $ paster make-config pysvnmanager production.ini
    Distribution already installed:
      pySvnManager 0.4.1dev-r140 from /home/jiangxin/virt/lib/python2.5/site-packages/pySvnManager-0.4.1dev_r140-py2.5.egg
    Creating production.ini
    Now you should edit the config files
      production.ini

* 初始化 pySvnManager 站点

  ::

    $ paster setup-app production.ini
    Running setup_config() from pysvnmanager.websetup

* 初始化后的文件和目录:

  * production.ini 是服务配置文件
  * config/localconfig.py 是 pySvnManager 本身的配置文件
  * config/svn.passwd 是用户口令文件，如果使用 LDAP 认证，此文件被忽略
  * config/svn.access 是 SVN 授权文件
  * svnroot 目录或链接：指向 SVN 版本库根目录

* 运行服务

  ::
  
    $ paster serve production.ini
    Starting server in PID 1618.
    serving on 0.0.0.0:5000 view at http://127.0.0.1:5000

* 先不要着急用浏览器访问，因为我们尚未配置登录的认证用户和授权

  我们会在后面的配置章节介绍

Virtualenv 解决运行中出现的 python 包版本兼容问题
---------------------------------------------------
Pylons 是一个 python 的 MVC 框架，pySvnManager 就是基于这个框架开发的。这个框架所依赖的各个组件都用独立的 python 包发布，在前几年的版本演化过程中，新版本总是带来各样的兼容性问题，也很难保证在今后不会出现向后兼容问题。

再有一个就是 Python 包多版本共存问题。不像 Ruby 的 gem 包，可以同时安装多个不同版本，并且通过依赖关系可以明确版本，Python 包只能安装一个版本。如果有不同的应用都使用了同一个包，例如，一个应用只能运行于 Pylons 0.9.7，另外一个应用只能运行在 Pylons 的新版本 1.0 上，难道两个应用要部署在不同的服务器上么？

Python 可以用 virtualenv 工具包解决多版本共存问题。相当于在某个目录下建立一个隔离的 Python 环境，这个环境有独立的 python 命令，独立的 easy_install 命令，独立的 python 库目录...

为了防止当 Pylons 框架升级后，造成 pySvnManager 不能运行，用 Debian/Ubuntu 安装的 pySvnManager 预留了 virtualenv 的接口。
即一旦在 /opt/pysvnmanager/virtualenv 下部署了虚拟的 python 环境，则使用该环境下的 python 包。

下面演示如何在 /opt/pysvnmanager/virtualenv 下部署虚拟 python 环境：

* 先建立一个与外界完全隔离的 virtualenv 环境

  ::

    # virtualenv --no-site-packages /opt/pysvnmanager/virtualenv/
    New python executable in /opt/pysvnmanager/virtualenv/bin/python
    Installing setuptools............done.

* 用 source 命令引入脚本，即将 virtualenv 环境带入到当前环境中

  可以看到，当运行成功后，命令行的提示符有了变化，用 (virtualenv) 前缀标明当前运行环境是 virtualenv 隔离的 python 环境。

  ::

    # source /opt/pysvnmanager/virtualenv/bin/activate
    (virtualenv)hp:/opt/pysvnmanager#

* 看看 easy_install 命令位置？不再指向系统目录，而是来自虚拟环境下的 bin 目录了。

  ::

    # which easy_install
    /opt/pysvnmanager/virtualenv/bin/easy_install

* 安装 pySvnManager 依赖的第三方 python 包

  说明：为了快速安装，在运行 easy_install 命令时，指定了公司内部的 PYPI 镜像

  ::

    # easy_install --index-url http://pypi.bj.ossxp.com/ --find-links http://pypi.bj.ossxp.com/ --allow-hosts *.bj.ossxp.com Pylons==1.0
    Searching for Pylons==1.0
    Reading http://pypi.bj.ossxp.com/
    Reading http://pypi.bj.ossxp.com/Pylons/
    Best match: Pylons 1.0
    Downloading http://pypi.bj.ossxp.com/Pylons/Pylons-1.0.tar.gz#md5=b7687e26d0275eaf7bf44ca4883f4428
    Processing Pylons-1.0.tar.gz
    Running Pylons-1.0/setup.py -q bdist_egg --dist-dir /tmp/easy_install-FEwvFt/Pylons-1.0/egg-dist-tmp-BJ7NQH
    Adding Pylons 1.0 to easy-install.pth file

    Installed /opt/pysvnmanager/virtualenv/lib/python2.5/site-packages/Pylons-1.0-py2.5.egg

    Processing dependencies for Pylons==1.0
    ...

* 修改 /opt/pysvnmanager/virtualenv/lib/python2.5/site-packages/easy-install.pth 文件

  将系统的 Python 环境路径添加其中，以便能够在虚拟环境中访问到 python subversion binding 以及其它第三方 python 包

  ::
  
   @@ -18,4 +18,7 @@
    ./WebHelpers-1.0-py2.5.egg
    ./Routes-1.12.1-py2.5.egg
    ./Pygments-1.3.1-py2.5.egg
   +/usr/lib/python2.5
   +/usr/lib/python2.5/site-packages
   +/usr/lib/pymodules/python2.5
    import sys; new=sys.path[sys.__plen:]; del sys.path[sys.__plen:]; p=getattr(sys,'__egginsert',0); sys.path[p:p]=new; sys.__egginsert = p+len(new)

* 重启 pysvnmanager，就会使用虚拟环境中的 python 包

  ::

    $ sudo /etc/init.d/pysvnmanager restart 


需要安装的第三方工具
--------------------
RCS
~~~~
RCS 提供文件级的版本控制工具。pySvnManager 使用 RCS 工具包对 svn.access 文件进行版本控制。

配置
=====
安装完毕后，还需要为 pySvnManager 实例配置认证和授权等。对 pySvnManager 实例进行配置，就是针对实例下的各个配置文件进行相应的编辑操作。对于使用 Debian/Ubunt 包管理器安装，缺省实例的路径在 /opt/pysvnmanager/default 目录下。

应用启动配置文件 \*.ini
-------------------------
pySvnManager 应用的启动配置文件是一个 ini 文件。一般对于生产环境，常常使用名为 production.ini 的配置，开发平台使用 development.ini，不过该配置文件的文件名实际上没有限制。

该配置文件中，关键的设置有：

* 服务端口，缺省为 5000

  ::

    [server:main]
    use = egg:Paste#http
    host = 0.0.0.0
    port = 5000

* 配置文件位置

  ::

    # authn_file: a .htpasswd style password file, used for pysvnmanager authentication.
    authn_file = %(here)s/config/svn.passwd

    # authz_file: svn authz config file with administrative extension. (ossxp.com)
    authz_file = %(here)s/config/svn.access
    
    # svn repository root path
    repos_root = %(here)s/svnroot

  其中

  * authz_file 是 pySvnManager 维护的授权文件，缺省为 config 目录下的 svn.access 文件
  * authn_file 是 Apache 认证口令文件，缺省为 config 目录下的 svn.passwd 文件。如果 pySvnManager 使用其它认证方式，该文件被忽略
  * repos_root 是版本库根目录，新的版本库将会创建在该目录下。可以修改 repos_root 的指向，让其指向 Subversion 实际部署的版本库根路径

* 与 Apache 整合设置

  与 Apache 整合，往往要将 pySvnManager 实例至于某个目录之下，就需要在配置文件中增加中间件过滤器的配置。这主要是由名为 proxy-prefix 的过滤器实现的。
  
  缺省该 ini 文件的主要的配置都是在 [app:main] 小节中，对于 Debian/Ubuntu 包管理器安装的缺省实例，则自动配置了过滤器管道，实现 Apache 带前缀的 URL 和 pySvnManager 不带前缀的 URL 之间的映射。 如下面所示，[app:main] 小节被改名为 [app:myapp]，增加了 [filter:proxy-prefix] 小节和 [pipeline:main] 小节。

  ::
   
    [app:myapp]
    use = egg:pySvnManager
    ...
    
    [filter:proxy-prefix]
    use = egg:PasteDeploy#prefix
    prefix = /svnadmin
    
    [pipeline:main]
    pipeline = proxy-prefix myapp


服务配置文件 config/localconfig.py
------------------------------------
主要是通过该配置文件进行认证方式的设置。该配置文件是对 pySvnManager 全局配置 DefaultConfig 的定制，因此除了认证相关的设置外，所有 DefaultConfig 类中的配置都可以在此文件中进行覆盖。

注意：此文件为 python 格式的文件，编辑要遵照 python 语法，对于不了解 python 的用户切记不要擅自改动缩进，格式美观的就是正确的。

缺省采用 HTTP BASIC 认证
~~~~~~~~~~~~~~~~~~~~~~~~~
缺省使用 svn.passwd 口令文件进行认证。在 config/localconfig.py 中的缺省配置就是使用口令文件进行认证：

::

    from pysvnmanager.model.auth.http import htpasswd_login
    auth = [htpasswd_login]

缺省的口令文件是 config/svn.passwd 文件，可以用工具 htpasswd 对口令进行维护

* 添加新用户并创建口令

  ::

    $ htpasswd config/svn.passwd jiangxin
    New password:
    Re-type new password:
    Adding password for user jiangxin

* 修改用户口令

  ::

    $ htpasswd config/svn.passwd jiangxin
    New password:
    Re-type new password:
    Updating password for user jiangxin

* 删除用户

  ::

    $ htpasswd -D config/svn.passwd jiangxin
    Deleting password for user jiangxin

使用 LDAP 认证
~~~~~~~~~~~~~~~~
修改 config/localconfig.py，将认证方式设置为 ldap_login，示例如下：

::

    import ldap
    from pysvnmanager.model.auth.ldap_login import ldap_login
    auth = [ldap_login]

    # LDAP login parameters
    ldap_uri = 'ldap://localhost'
    ldap_base = 'dc=foo,dc=bar'
    ldap_filter = '(&(uid=%(username)s)(authorizedService=svn)(ossxpConfirmed=TRUE))'

pySvnManager 授权
--------------------
当然不是所有通过认证的用户都能够访问 pySvnManager 并管理授权，必须是指定的管理员才能够访问。pySvnManager 使用扩展的 SVN 授权文件来为自身授权。

缺省的 config/svn.access 授权示例：

::

  # version : 0.2.1
  # admin : / = &admin, root
  # admin : repos1 = @admin
  
  [groups]
  admin = &admin, root
  
  [aliases]
  admin = jiangxin
  
  [/]
  @admin = rw
  
  [repos1:/]
  @admin = rw

其中该文件头部以井号开始的注释用于对版本库管理者进行授权。

* 第一行标明当前配置文件的版本号，每次更改配置文件，版本号末尾数字自动加一

* 后续的注释行以 admin 关键字标识，是版本库管理者授权

* 第二行是对根版本库(/)进行授权。后面用逗号分割的用户列表是超级管理员，可以管理任何版本库

  示例中是 别名为admin 的用户以及登录名为 root 的用户，拥有超级管理员权限

* 第三行是对名为 repos1 的版本库进行授权，属于 admin 用户组的用户，对 repos1 版本库具有管理权限

手动编辑该文件，设置超级管理员帐号。

运行
=====
无论是 Debian 包管理器方式安装，还是 easy_install，都需要启动服务。缺省使用 python 内置Web服务，运行在 5000 端口。

* 对于 Debian 包管理器，用 init 脚本启动

  ::

    $ sudo /etc/init.d/pysvnmanager restart

* 对于 easy_install 安装并用 paster 部署的实例（架设部署配置文件为 production.ini）

  ::

    $ paster serve production.ini

* 检查 5000 端口是否启动

  ::

    $ sudo netstat -ltnp | grep 5000
    tcp        0      0 0.0.0.0:5000            0.0.0.0:*               LISTEN      2906/python

* 对于 Debian 包管理器方式安装，打开浏览器，输入 SVN 虚拟主机下的 /svnadmin 地址，如：https://svn.moon.ossxp.com/svnadmin/ 。 在弹出的登录窗口中输入管理员用户名和口令。

* 对于未与 Apache 整合的实例，直接用浏览器访问服务器的 5000 端口。在弹出的登录窗口中输入管理员用户名和口令。

* log 目录下的日志，可以在服务无法运行时，对错误进行诊断

创建版本库
==========



其它文档
========

邮件列表很像邮件，从用户操作和数据传输的实现上和邮件非常类似，这也使得邮件列表非常简单和易用。同时邮件列表也很像论坛，你发出的帖子可以被其他人看到并回复，而且关于同一个话题的讨论会形成线索显示在 Web 页面存档中，因此也非常适合于知识积累。

下面是邮件列表和其他工具的对照。（实心的星星越多越好，空心的星星越少越好）

 +----------+----------+----------+----------+----------+
 |          |   邮件   | 即时通讯 |   论坛   | 邮件列表 |
 +==========+==========+==========+==========+==========+
 | 易用性   |   ★★★★★  |   ★★★★★  |     ★★★  |   ★★★★★  |
 +----------+----------+----------+----------+----------+
 | 时效性   |    ★★★★  |   ★★★★★  |       ★  |    ★★★★  |
 +----------+----------+----------+----------+----------+
 | 知识积累 |       ★  |       ★  |   ★★★★★  |   ★★★★★  |
 +----------+----------+----------+----------+----------+
 | 可达性   |   ★★★★★  |   ★★★★★  |       ★  |   ★★★★★  |
 +----------+----------+----------+----------+----------+
 | 数据广播 |     ★★★  |       ★  |     ★★★  |   ★★★★★  |
 +----------+----------+----------+----------+----------+
 | 干扰程度 |      ☆☆  |   ☆☆☆☆☆  |       ☆  |       ☆  |
 +----------+----------+----------+----------+----------+
 | 可嵌入性 |     ★★★  |       ★  |       ★  |   ★★★★★  |
 +----------+----------+----------+----------+----------+

* 从易用性上讲，邮件列表非常简单易用。而论坛必须登录才能访问导致其易用性较差
* 从时效性上讲，即时通讯可以实时沟通，邮件列表以收邮件方式获得，也有不错的时效性。但是论坛如果不登录很难发现有新的消息，所以论坛时效性最差
* 从知识积累上讲，私人邮件、即时通讯都没有存档，而邮件列表可以将讨论用 web 页面存档。
* 从可达性上讲，邮件列表和邮件、即时通讯一样，信息都可以推到桌面，而论坛则必须主动去访问才能获取信息
* 从数据广播上讲，即时通讯最差，邮件由于群发没有针对性会被收件人当做垃圾邮件而忽略，论坛则因为信息可达性差影响广播效果
* 从对工作干扰程度上讲，即时通讯对工作的干扰最严重。邮件的干扰程度比邮件列表大，是因为邮件列表可以很容易建立投递规则而分门别类的存储，普通邮件则很难根据主题建立过滤规则。
* 可嵌入性，指的是和其他工具整合的能力，邮件列表因为是通过邮件发送实现的，无须特殊API，因此嵌入性最好。邮件的嵌入性稍差，是因为普通邮件的针对性不好。

访问邮件列表一览页
==================
在浏览器输入邮件列表地址，如: `http://list.your.domain.com/` ，或者在单点登录页面中点击服务列表中的 |mailman icon| 图标指向的邮件列表服务，访问邮件列表一览页面。

.. |mailman icon| image:: images/mailman-icon.png

.. figure:: images/listinfo.png
   :scale: 60

* 上图是尚未登录时的邮件列表一览页面
* 页面上列有 7 个邮件列表：Dev, Pysvnmanager-ci, ..., Wiki
* 点击页面中的登录链接，跳转到单点登录网站
* 登录成功后，返回邮件列表一览页面

.. figure:: images/listinfo-login.png
   :scale: 60

   登录后的邮件列表一览页

* 等录成功后的邮件列表一览页，在欢迎信息中，出现了登录者的姓名
* 显示的邮件列表变成了 9 个。多出的两个列表（Hello-commit, Hello-discuss）是登录者已经订阅的，被管理员设置为缺省隐藏的列表
* 列表名称加粗，并标注了星号的列表，是已经订阅了的邮件列表
* 斜体非加粗的列表，是尚未订阅的邮件列表

订阅邮件列表
=============
很多人往往混淆邮件列表和邮件组混淆。实际上订阅/取消订阅是两者最大的区别之一（另外一个区别是：发往邮件组的邮件不能Web存档）。邮件组是在邮件服务器上配置的一个转发地址，将发往一个邮件地址的邮件转发多人，是管理员手工维护的。用户不能自己加入邮件组以及撤离邮件组。

订阅/取消订阅，是邮件列表最主要和人性化的功能。

* 订阅成功后，该用户就成为列表成员
* 作为列表成员，用户可以向列表发送邮件，该邮件会转发给其他订阅该列表的用户
* 如果使用其他邮箱（非订阅者邮箱）发信，邮件可能被拒绝或者暂存，等待管理员审核
* 可以设置订阅策略，即时收信，或者等到邮件积累到一定程度，例如每天只发送一次信息摘要
* 作为列表一员，可以查看整个列表订阅者名单——花名册
* 如果对该列表不再感兴趣，可以随时退订

那么如何订阅邮件列表呢？你需要访问需要订阅的列表的首页。访问邮件列表一览页面，点击某个邮件列表的名称，便进入到该邮件列表的首页。

.. figure:: images/list-page.png
   :scale: 60

   pySvnManager-commit 邮件列表首页

可以在该列表页面中看到：

* 邮件列表 Web 归档的链接，点击可以看到历史存档

  注：该列表存档的权限为不公开，仅限登录帐号访问。即如果您能够通过认证，就能够看到历史存档

* 如何发言的提示。很简单，只要向地址 `pysvnmanager-commit@...`  发送邮件即可。
* 订阅对话框，因为当前用户尚未登录，所以邮件和姓名字段为空
* 访问订阅者名单——花名册
* 退订或者编辑选项

订阅过程
--------

* 打开欲订阅的邮件列表首页，填写订阅表单。

  - 在订阅对话框中填写邮件地址和姓名，如果已登录，邮件地址和姓名自动填充。
  
    .. figure:: images/sub-policy-login2.png
       :scale: 80
  
  - 选择语种，缺省中文。
  - 缺省不通过摘要收信，而是即时收信
  - 点击订阅按钮

* 通常订阅需要进行确认。即订阅后，您会收到一封确认信。点击邮件当中的确认地址，即完成订阅。
* 有的邮件列表，成员的资格需要经过管理员审核。

  对于这样的列表，在用户确认邮件地址后，管理员会收到一封通知邮件，告知有人订阅了列表，需要进行审核。
  管理员按照通知邮件中的提示进行操作，审核成员资格。当管理员审核通过后，用户订阅才告成功。

* 用户会收到一封通知邮件，告知已经成为列表中的一员。

不同订阅策略的列表
------------------
管理员可以为邮件列表设定不同的订阅策略，有的需要管理员审核，有的只需要订阅者确认一下邮件地址的有效性即可。

下面是不同订阅策略下的订阅对话框。在登录状态和非登录状态稍有不同。

确认即可订阅的邮件列表
~~~~~~~~~~~~~~~~~~~~~~~
经过邮件确认即可订阅，成为列表成员。

.. figure:: images/sub-policy-confirm.png
   :scale: 80


需经管理员审核的邮件列表
~~~~~~~~~~~~~~~~~~~~~~~~~
订阅后，管理员审核通过才能成为列表成员。

.. figure:: images/sub-policy-approve.png
   :scale: 80


确认并需管理员审核的邮件列表
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
订阅后不但要确认邮件地址，还需要管理员审核通过才能成为列表成员。

.. figure:: images/sub-policy-confirm-and-approve.png
   :scale: 80


登录后方能订阅的列表
~~~~~~~~~~~~~~~~~~~~
不登录不能订阅。

.. figure:: images/sub-policy-login.png
   :scale: 80


登录后显示的订阅对话框：

.. figure:: images/sub-policy-login2.png
   :scale: 80


登录并经管理员审核的列表
~~~~~~~~~~~~~~~~~~~~~~~~
登录后，方可订阅，而且订阅请求发出后，还需要管理员审核。

.. figure:: images/sub-policy-login-approve.png
   :scale: 80

   登录后订阅，并需管理员审核的订阅对话框

邮件列表的使用
==============
看看您加入邮件列表的通知邮件吧。其中包括邮件列表的使用方法。

.. figure:: images/welcome-msg.png
   :scale: 60

实际上你早就已经会了对么？当您订阅了 pysvnmanager-commit 邮件列表，
你直接向地址 `pysvnmanager-commit@list.moon.ossxp.com` （群英汇月球分公司 pysvnmanager 代码提交邮件列表），
发送一封邮件，您就向列表发起了一个新的话题。所有列表成员（即时收信）都立即会收到你的邮件。

你自己也会收到一封来自列表的邮件，如果您没有设置“不收自己的信”的话。

.. figure:: images/test-email.png
   :scale: 70

回复该邮件，会发现邮件回复到该邮件列表。（管理员可以设定邮件的回复地址：发件人，本邮件列表，其他邮件列表地址...）

.. figure:: images/test-email-reply.png
   :scale: 70

访问邮件归档
============
在来自邮件列表的每一封邮件的结尾，都有一段类似的列表相关提示信息。例如，前面例子中的pysvnmanager-commit 列表的邮件尾部，都有如下信息：

::

  _______________________________________________
  Pysvnmanager-commit mailing list
  Pysvnmanager-commit@list.moon.ossxp.com
  http://list.moon.ossxp.com/mailman/listinfo/pysvnmanager-commit
 
点击其中的 URL，就进入了该列表的 Web 存档。当然，您也可以从列表一览页，找到访问列表存档的链接。

* 某列表的归档首页

  .. figure:: images/archive-index.png
     :scale: 60

* 按照线索查看某个月份的归档

  .. figure:: images/archive-thread-index.png
     :scale: 60

* 查看归档中的某篇文章

  .. figure:: images/archive-article.png
     :scale: 60


整理您的邮箱
============
使用邮件列表还有一个潜在的好处，可能您尚未发现。就是可以让您的邮箱更整洁。

“怎么会呢？”，你可能问到：“在使用邮件列表之后，我的邮件是越来越多了，邮箱变得更乱了，怎么样才能整洁呢？”

答案是：邮箱软件提供的邮件过滤规则，可以将邮件分门别类的存储。邮件列表寄出的邮件非常有共性，可以非常容易的定义过滤规则。

* Thunderbird 建立邮件过滤规则

  通过菜单："工具" --> "消息过滤器" 可以创建和编辑邮件过滤规则。

  .. figure:: images/tb-filter.gif
     :scale: 80


* Gmail 邮箱建立邮件过滤规则

  Gmail 功能非常强大，在业界率先大规模使用 AJAX，让客户拥有了全新的 Webmail 的体检，同时支持 IMAP/POP3 收信。Gmail 也支持建立“过滤器”：

  .. figure:: images/gmail-filter.png
     :scale: 60

  为邮件添加标签，类似于归类到某个目录中；跳过收件箱，类似与直接移动邮件
 
* Outlook 建立邮件过滤规则

  也可以建立邮件过滤规则。但是为什么不使用开源的 Thunderbird 呢？

邮件列表的定制及退订
====================
访问邮件列表一览页，并登录。

.. figure:: images/list-page.png
   :scale: 60

   登录后的邮件列表一览页

在最下方有一个“退订或编辑选项” 的按钮，点击此按钮，进入退订/编辑选项界面

.. figure:: images/list-options.png
   :scale: 60

通过此页面，您可以：

* 取消订阅该列表

  退订之后，您不会再收到该列表的通知邮件。

  注意：有的列表被设置为必须经过管理员审核后才能退订，这通常是比较重要的成员列表，为了避免成员遗漏重要通知而设置的行为。
  在这种情况下，你可以选择下面的办法，修改自己的收信方式。

* 改变此列表的收信方式

  如果你不想频繁收到该列表传递的邮件，可以将收信模式由“即时收信” 改为“摘要模式”，这样你将会收到“聚合”后的一封每日的邮件摘要。

* 隐身。不显示在本列表的花名册中

FAQ
====

向邮件列表发送邮件被暂存？
--------------------------
有几种情况，您发往邮件列表的邮件可能被暂存，等待管理员审核。同时您自己会收到一封通知邮件，告知为何邮件被暂存等待审核。

可能的情况有：

* 邮件太大。缺省一个列表只允许发送小于 500KB 的邮件，如果邮件太大（包含太多的附件），就会被暂存。

  解决方案：除了等待管理员审批外，还可以要求管理员放宽对邮件大小的限制。

* 您尚不属于该邮件列表，向其发送邮件会被暂存。

  解决方案：您可以先订阅该列表，在成为列表成员后，再向该列表发送邮件。

  还有一个办法是，请求管理员建立对某些域名的信任，将来自该域名的邮件无条件放行。

* 没有将邮件列表的地址放在 To 或者 CC（抄送）字段上，而是放在 BCC（暗送）字段中

  这可能是使用该邮件列表订阅另外的一个列表，导致邮件传递时，地址没有显式的放在 TO 字段中。
  也可能是通过一个别名指向的该邮件列表。

  解决方案：如果的确难以将邮件列表地址放在 To 字段发送，可以配置列表隐私选项的接收端过滤器。


我发往邮件列表的邮件，列表中部分人很快收到，其他人要很久才收到？
----------------------------------------------------------------
这应该是邮件列表的设置和邮件发送服务器的设置不匹配造成的，导致发给部分成员的邮件被放到邮件队列中，而没有即时发送。

联系管理员，正确设置邮件列表和邮件服务器的设置。

我的邮件地址更改后，不能查看邮件列表的 Web 存档了？
---------------------------------------------------
具体的说，您在群英汇用户管理平台中更改了您的邮件地址，这导致了邮件列表中订阅使用的邮件地址和认证系统的用户数据库中的邮件地址不匹配。

当您访问一个只有成员才能够访问的列表 Web 存档时，当您登录后，您的新邮件地址不在成员列表之列，所以无法查看Web存档。

解决办法：使用新的邮件地址订阅列表。目前没有办法通过 Web 界面自己从列表中退订旧的邮件地址，只能通过邮件方式从列表中退订旧的邮件地址。具体方法参见订阅的通知邮件。您也可以请求管理员帮助将您的旧邮件地址从列表中退订。

